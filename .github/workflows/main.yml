name: Doyendev

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Log in to Amazon ECR Public
      id: login-ecr-public
      run: |
        # aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/t3h1v0s4
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: public.ecr.aws/t3h1v0s4/monitoring-frontend-ecr:latest
        
    - name: SSH into Bastion Host and deploy
      env:
        BASTION_HOST: ${{ secrets.BASTION_HOST }}
        BASTION_USER: ${{ secrets.BASTION_USER }}
        BASTION_SSH_KEY: ${{ secrets.BASTION_SSH_KEY }}
        PRIVATE_EC2_USER: ${{ secrets.PRIVATE_EC2_USER }}
        PRIVATE_EC2_HOST: ${{ secrets.PRIVATE_EC2_HOST }}
        PRIVATE_EC2_SSH_KEY: ${{ secrets.PRIVATE_EC2_SSH_KEY }}
        ECR_REPOSITORY: public.ecr.aws/t3h1v0s4/monitoring-frontend-ecr
      run: |
        echo "${{ secrets.BASTION_SSH_KEY }}" > bastion_key.pem
        chmod 600 bastion_key.pem
        echo "${{ secrets.PRIVATE_EC2_SSH_KEY }}" > ec2_key.pem
        chmod 600 ec2_key.pem

        ssh -i bastion_key.pem -o StrictHostKeyChecking=no $BASTION_USER@$BASTION_HOST << EOF
          ssh -i ~/.ssh/ayesha-terraform.pem -o StrictHostKeyChecking=no $PRIVATE_EC2_USER@$PRIVATE_EC2_HOST << EOI
            sudo docker pull $ECR_REPOSITORY:latest
            sudo docker stop frontend || true
            sudo docker rm frontend || true
            sudo docker run -d -p 4000:4000 --name frontend $ECR_REPOSITORY:latest
          EOI
        EOF

